name: Main workflow

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  lint:
    name: Run linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - uses: actions/checkout@v4
      - run: npm ci
      - run: npm run lint

  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - uses: actions/checkout@v4
      - run: npm ci
      - run: npm run test
      - name: Testrun with zip bundle
        run: |
          npm run testrun
          test -d _dest && echo dest OK
          test -f _dest/build.zip && echo build.zip OK
          test `find _dest | wc -l` = "11" && echo file count OK
          test -f _dest/.meta/src_files && echo src_files OK
          test `cat _dest/.meta/src_files | wc -l` = "6" && echo src_files line count OK
      - name: Testrun with text bundle
        run: |
          npm run testrun:t
          test -f _dest/build.txt && echo build.txt OK
          test `cat _dest/build.txt | wc -l` = "29" && echo build.txt line count OK
      - name: Testrun with text+zip bundle
        run: |
          npm run testrun:tz
          test -f _dest/build-tz.zip && echo build-tz.zip OK
          unzip -l _dest/build-tz.zip | grep 'bundle.txt' && echo bundle.txt in zip OK

  test-sea:
    name: Test SEA build
    runs-on: ubuntu-latest
    # if: false
    # Limited to bundle file and sea blob because most of the rest needs windows
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - uses: actions/checkout@v4
      - run: npm ci
      - name: Build SEA bundle
        run: |
          npm run build:bundle
          node --experimental-sea-config sea-config.json

  auto-tag:
    name: Add a tag on new version
    needs:
      - lint
      - test
    runs-on: ubuntu-latest
    # ORIGINAL REPO, to avoid running for forks
    if: github.repository == 'sbcgua/mockup-compiler-js'
    permissions:
      contents: write # for tag
    steps:
      - uses: actions/checkout@v4
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: Detect version change
        id: detect_version_change
        run: |
          LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          LAST_TAG=${LAST_TAG#v}
          CURRENT_VERSION=$(jq -r -c .version package.json)
          echo "Last tag: ${LAST_TAG}, Current version: ${CURRENT_VERSION}"
          if [ "${LAST_TAG}" = "${CURRENT_VERSION}" ]; then
            echo "Version change was not detected, exiting..."
          else
            echo "Version change detected"
            # echo "::set-output name=VERSION_CHANGED::yes"
            # echo "::set-output name=NEW_VERSION::$CURRENT_VERSION"
            echo "VERSION_CHANGED=yes" >> $GITHUB_OUTPUT
            echo "NEW_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi
      - name: Debug outputs
        run: |
          echo "VERSION_CHANGED=${{ steps.detect_version_change.outputs.VERSION_CHANGED }}"
          echo "NEW_VERSION=${{ steps.detect_version_change.outputs.NEW_VERSION }}"
          if [ "${GITHUB_REF}" = "refs/heads/master" ] && [ "${GITHUB_EVENT_NAME}" != "pull_request" ]; then
            echo "This is a push to master, proceeding with tag creation"
          else
            echo "This is not a push to master, skipping tag creation"
          fi
      - name: Create new tag
        if: github.ref == 'refs/heads/master' && success() && steps.detect_version_change.outputs.VERSION_CHANGED == 'yes'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # secrets.DEPLOYMENT_TOKEN
        run: |
          if [ -z "${GITHUB_TOKEN}" ]; then
            echo "GITHUB_TOKEN is undefined"
            exit 1
          fi
          AUTH_HEADER="Authorization: token ${GITHUB_TOKEN}"
          API_ENDPOINT="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/refs"
          API_REQUEST="{ \"ref\": \"refs/tags/v${{ steps.detect_version_change.outputs.NEW_VERSION }}\", \"sha\": \"${GITHUB_SHA}\" }"
          echo "Api endpoint: ${API_ENDPOINT}"
          echo "Api request:  ${API_REQUEST}"
          HTTP_CODE=$(curl -s -X POST "$API_ENDPOINT" -H "$AUTH_HEADER" -d "$API_REQUEST" -w "%{http_code}\n" -o /tmp/response.json)
          echo "Http code:    ${HTTP_CODE}"
          cat /tmp/response.json
          [[ $HTTP_CODE == 2* ]]
